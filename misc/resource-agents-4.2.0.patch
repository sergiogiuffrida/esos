--- a/heartbeat/Raid1	2018-10-24 04:12:09.000000000 -0400
+++ b/heartbeat/Raid1	2023-10-11 10:54:15.969396345 -0400
@@ -182,7 +182,7 @@
 
 md_assemble() {
 	local mddev=$1
-	$MDADM --assemble $mddev --config=$RAIDCONF $MDADM_HOMEHOST
+	ocf_run $MDADM --assemble --run $mddev --verbose --config=$RAIDCONF $MDADM_HOMEHOST
 	udev_settle --exit-if-exists=$mddev
 }
 #
@@ -226,7 +226,7 @@
 	local mddev=$1
 	local rc
 	ocf_log info "Attempting to mark array $mddev readonly"
-	$MDADM --readonly $mddev --config=$RAIDCONF
+	ocf_run $MDADM --readonly $mddev --config=$RAIDCONF
 	rc=$?
 	if [ $rc -ne 0 ]; then
 		ocf_exit_reason "Failed to set $mddev readonly (rc=$rc)"
@@ -246,7 +246,7 @@
 	rm -f $tmp_block_file
 	ocf_log info "block device file $1 missing, creating one in order to stop the array"
 	mknod $tmp_block_file b 9 $n
-	$MDADM --stop $tmp_block_file --config=$RAIDCONF
+	ocf_run $MDADM --stop $tmp_block_file --config=$RAIDCONF
 	rc=$?
 	rm -f $tmp_block_file
 	return $rc
@@ -254,13 +254,13 @@
 raid1_stop_one() {
 	ocf_log info "Stopping array $1"
 	if [ -b "$1" ]; then
-		$MDADM --stop $1 --config=$RAIDCONF &&
-			return
+		ocf_run $MDADM --stop $1 --config=$RAIDCONF
+		test $? -eq 0 && return
 	else
 		# newer mdadm releases can stop arrays when given the
 		# basename; try that first
-		$MDADM --stop `basename $1` --config=$RAIDCONF &&
-			return
+		ocf_run $MDADM --stop `basename $1` --config=$RAIDCONF
+		test $? -eq 0 && return
 		# otherwise create a block device file
 		mknod_raid1_stop $1
 	fi
@@ -375,6 +375,7 @@
 		return $OCF_NOT_RUNNING
 	fi
 	if [ $HAVE_RAIDTOOLS != "true" ]; then
+		# Don't use ocf_run() here since it can be noisy
 		$MDADM --detail --test $mddev >/dev/null 2>&1 ; rc=$?
 		case $rc in
 		0)	;;
@@ -403,9 +404,9 @@
 	if [ "$__OCF_ACTION" = "monitor" -a "$OCF_RESKEY_CRM_meta_interval" != 0 \
 		-a $TRY_READD -eq 1 -a $OCF_CHECK_LEVEL -gt 0 ]; then
 		ocf_log info "Attempting recovery sequence to re-add devices on $mddev:"
-		$MDADM $mddev --fail detached
-		$MDADM $mddev --remove failed
-		$MDADM $mddev --re-add missing
+		ocf_run $MDADM $mddev --fail detached
+		ocf_run $MDADM $mddev --remove failed
+		ocf_run $MDADM $mddev --re-add missing
 		# TODO: At this stage, there's nothing to actually do
 		# here. Either this worked or it did not.
 	fi
--- a/heartbeat/VirtualDomain	2018-10-24 04:12:09.000000000 -0400
+++ b/heartbeat/VirtualDomain	2023-11-25 18:20:48.568626132 -0500
@@ -460,7 +460,7 @@
 		try=$(($try + 1 ))
 		status=$(LANG=C virsh $VIRSH_OPTIONS domstate $DOMAIN_NAME 2>&1 | tr 'A-Z' 'a-z')
 		case "$status" in
-			*"error:"*"domain not found"|*"error:"*"failed to get domain"*|"shut off")
+			*"error:"*"domain not found"*|*"error:"*"failed to get domain"*|"shut off")
 				# shut off: domain is defined, but not started, will not happen if
 				#   domain is created but not defined
 				# "Domain not found" or "failed to get domain": domain is not defined
@@ -733,9 +733,10 @@
 			fi
 
 			# The "shutdown_timeout" we use here is the operation
-			# timeout specified in the CIB, minus 5 seconds
-			shutdown_timeout=$(( $NOW + ($OCF_RESKEY_CRM_meta_timeout/1000) -5 ))
+			# timeout specified in the CIB, minus 15 seconds
+			shutdown_timeout=$(( $NOW + ($OCF_RESKEY_CRM_meta_timeout/1000) -15 ))
 			# Loop on status until we reach $shutdown_timeout
+			loop_cnt=1
 			while [ $NOW -lt $shutdown_timeout ]; do
 				VirtualDomain_status
 				status=$?
@@ -749,12 +750,21 @@
 						# waiting (until shutdown_timeout
 						# expires)
 						sleep 1
+						# The guest OS may not have received the ACPI shutdown event, so try again every 20s
+						if [ $(expr ${loop_cnt} % 20) -eq 0 ]; then
+							if [ -n "${OCF_RESKEY_CRM_shutdown_mode}" ]; then
+								shutdown_opts="--mode ${OCF_RESKEY_CRM_shutdown_mode}"
+							fi
+							ocf_log info "Issuing additional graceful shutdown request for domain ${DOMAIN_NAME}."
+							virsh $VIRSH_OPTIONS shutdown ${DOMAIN_NAME} $shutdown_opts
+						fi
 						;;
 					*)
 						# Something went wrong. Bail out and
 						# resort to forced stop (destroy).
 						break;
 				esac
+				loop_cnt=$(expr ${loop_cnt} + 1)
 				NOW=$(date +%s)
 			done
 			;;
