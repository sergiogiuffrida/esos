#! /bin/busybox sh

# Just in case
rescue_shell() {
	echo "Something bad happened; attempting to drop into a shell..."
	/bin/busybox --install -s
	exec setsid sh -c 'exec sh </dev/tty1 >/dev/tty1 2>&1'
}

# From: https://wiki.gentoo.org/wiki/Custom_Initramfs
cmdline() {
	local value
	value=" $(cat /proc/cmdline) "
	value="${value##* $1=}"
	value="${value%% *}"
	[ "$value" != "" ] && echo "$value"
}

# For MD RAID boot devices
assem_boot_md() {
	mdadm --examine --brief --scan --config=partitions | \
	while read -r row; do
		md_path="$(echo ${row} | awk '{ print $2 }')"
		md_name="$(echo ${row} | awk '{ print $5 }' | cut -d= -f2)"
		if echo ${md_name} | \
		egrep 'esos_boot|esos_root|esos_conf|esos_logs|esos_data' > \
		/dev/null; then
			mdadm --assemble ${md_path} --name ${md_name} || \
			return 1
		fi
	done
}

# Install BusyBox
/bin/busybox --install -s

# Hide kernel console messages
dmesg -n 1

# Load early local storage drivers
if [ -e /lib/modules/$(uname -r)/mlx_compat.ko ]; then
	insmod /lib/modules/$(uname -r)/mlx_compat.ko || rescue_shell
fi
insmod /lib/modules/$(uname -r)/nvme-core.ko || rescue_shell
insmod /lib/modules/$(uname -r)/nvme.ko || rescue_shell

# Load early network adapter drivers
insmod /lib/modules/$(uname -r)/bnxt_en.ko || rescue_shell
insmod /lib/modules/$(uname -r)/r8152.ko || rescue_shell

# Some devices are delayed
echo "Waiting for devices to settle..."
sleep 5

# A few requirements
mount -t proc none /proc || rescue_shell
mount -t sysfs none /sys || rescue_shell
mdev -s || rescue_shell

# Catch if /proc/vmcore exists -- we capture the crash dump and reboot
if [ -e /proc/vmcore ]; then
	echo "It appears a crash dump kernel is running."
	echo "Assembling MD RAID boot devices (if any)..."
	assem_boot_md || rescue_shell
	echo "Attempting to resolve the 'esos_logs' file system device..."
	logs_fs_dev="$(findfs LABEL=esos_logs)" || \
	(echo "Error resolving the logs device node!"; rescue_shell)
	if [ -z "${logs_fs_dev}" ]; then
		echo "An empty result for the logs device node was returned!"
		echo "Re-enumerating the PCIe bus/tree..."
		echo 1 > /sys/bus/pci/rescan
		echo "Processing uevents via mdev..."
		uevent mdev & mdev -s
		echo "Trying to resolve the 'esos_logs' FS device (again)..."
		logs_fs_dev="$(findfs LABEL=esos_logs)" || \
		(echo "Error resolving the logs device node!"; rescue_shell)
	fi
	echo "Saving /proc/vmcore to the ESOS log file system..."
	mount -o sync ${logs_fs_dev} /mnt/tmp || rescue_shell
	makedumpfile -E -d 31 /proc/vmcore /mnt/tmp/dumpfile-`date +"%s"` || \
	rescue_shell
	echo "Unmounting the ESOS log file system..."
	umount /mnt/tmp || rescue_shell
	echo "Rebooting..."
	reboot -f || rescue_shell
fi

# Make sure we have enough physical memory if the system is running from RAM (default)
if ! grep esos_persist /proc/cmdline > /dev/null 2>&1; then
	if [ `cat /proc/meminfo | grep MemTotal | awk '{print $2}'` -lt 3500000 ]; then
		echo "ESOS requires at least 3.5 GB of usable RAM!"
		rescue_shell
	fi
fi

# Get the slot kernel parameter
slot_name="$(cmdline slot)"
if [ -z "${slot_name}" ]; then
	echo "Is the slot= kernel parameter missing?"
	rescue_shell
fi

# Configure all interfaces that have link for DHCP if using an ISO via NFS
if [ -n "$(cmdline nfs_iso_device)" ]; then
	for i in /sys/class/net/eth*; do
		iface="$(basename "${i}")"
		echo "Bringing up interface '${iface}'..."
		ifconfig "${iface}" up || rescue_shell
		sleep 5
		carrier="$(head -1 "${i}/carrier")"
		if [ -n "${carrier}" ] && [ "${carrier}" = "1" ]; then
			# Break the loop on the first lease obtained
			udhcpc -i "${iface}" -n && break
		fi
	done
fi

# The default root FS mount options may get overridden below
root_opts="sync"

if grep esos_iso /proc/cmdline > /dev/null 2>&1; then
	nfs_iso_device="$(cmdline nfs_iso_device)"
	if [ -n "${nfs_iso_device}" ]; then
		# Using an NFS device (host + path) for the ISO
		root_fs_dev="${nfs_iso_device}"
		nfs_mnt_opts="$(cmdline nfs_mnt_opts)"
		if [ -n "${nfs_mnt_opts}" ]; then
			# User gave special NFS mount options
			root_opts="${nfs_mnt_opts}"
		else
			# Just use our default NFS options
			root_opts="port=2049,nolock,proto=tcp"
		fi
	else
		# Resolve the CD-ROM device using the ESOS ISO name
		root_fs_dev="$(findfs LABEL=ESOS-ISO)" || \
		(echo "Error resolving the ESOS-ISO device!"; rescue_shell)
	fi
else
	# Assemble ESOS boot drive MD arrays here (if any)
	assem_boot_md || rescue_shell
	# Attempt to resolve the FS label here for regular boot
	root_fs_dev="$(findfs LABEL=esos_root)" || \
	(echo "Error resolving the root device node!"; rescue_shell)
	# Check the root file system and bail on non-correctable errors
	EXT2FS_NO_MTAB_OK=1 e2fsck -p ${root_fs_dev} > /dev/null
	fsck_status="${?}"
	if [ "${fsck_status}" -gt 1 ]; then
		echo "Error detected on '${root_fs_dev}' while fsck'ing!"
		rescue_shell
	fi
fi

if grep -q -E 'esos_iso|esos_persist' /proc/cmdline; then
	# Using squashfs for the root filesystem
	mount -t tmpfs tmpfs /mnt/overlay || rescue_shell
	esos_root_mnt="/mnt/tmp"
	sqsh_arch="${esos_root_mnt}/${slot_name}-root.sqsh"
	mount -o ${root_opts} ${root_fs_dev} ${esos_root_mnt} || rescue_shell
	mkdir -p /mnt/overlay/lower || rescue_shell
	mkdir -p /mnt/overlay/upper || rescue_shell
	mkdir -p /mnt/overlay/work || rescue_shell
	mount -t squashfs ${sqsh_arch} /mnt/overlay/lower || rescue_shell
	overlay_opts="lowerdir=/mnt/overlay/lower"
	overlay_opts="${overlay_opts},upperdir=/mnt/overlay/upper"
	overlay_opts="${overlay_opts},workdir=/mnt/overlay/work"
	mount -t overlay overlay -o ${overlay_opts} /mnt/root || rescue_shell
	mount --move ${esos_root_mnt} /mnt/root/mnt/root || rescue_shell
	mkdir -p /mnt/root/mnt/overlay || rescue_shell
	mount --move /mnt/overlay /mnt/root/mnt/overlay || rescue_shell
else
	# Using tmpfs for the root filesystem
	esos_root_mnt="/mnt/tmp"
	sqsh_arch="${esos_root_mnt}/${slot_name}-root.sqsh"
	mount -o ro ${root_fs_dev} ${esos_root_mnt} || rescue_shell
	mount -t tmpfs -o size=@@root_size@@ tmpfs /mnt/root || rescue_shell
fi

# Setup the root file system
echo "Initializing root file system..."
if ! grep -q -E 'esos_iso|esos_persist' /proc/cmdline; then
	cd /mnt/root || rescue_shell
	spinner="/-\|"
	spin_pos=0
	if [ -e "${sqsh_arch}" ]; then
		init_root_cmd="unsquashfs -n -i -f -d /mnt/root ${sqsh_arch}"
	else
		cpio_arch="${esos_root_mnt}/${slot_name}-root.cpio.bz2"
		init_root_cmd="bunzip2 -c ${cpio_arch} | cpio -imduv --quiet"
	fi
	# Extract the archive (with a fancy spinner)
	{ status=$(
	  { { ${init_root_cmd}
	      echo ${?} >&3
	    } | \
	        while read i; do
	                printf "\b"${spinner:$spin_pos:1}
	                spin_pos=$(( ( ${spin_pos} + 1 ) % 4 ))
	        done >&4
	         } 3>&1 )
	       } 4>&1
	if [ "${status}" -ne 0 ]; then
		rescue_shell
	fi
	printf "\b"
	cd / || rescue_shell
fi
cp -a /dev/* /mnt/root/dev/ || rescue_shell
ln -s busybox /mnt/root/bin/sh || rescue_shell
chroot /mnt/root /bin/sh -c "/bin/busybox --install -s"

# Special setup for the ESOS ISO
if grep esos_iso /proc/cmdline > /dev/null 2>&1; then
	chroot /mnt/root /usr/bin/sed -i \
	's/^rc.mdraid_enable.*/rc.mdraid_enable=NO/' /etc/rc.conf
	chroot /mnt/root /usr/bin/sed -i \
	's/^rc.lvm2_enable.*/rc.lvm2_enable=NO/' /etc/rc.conf
	chroot /mnt/root /usr/bin/sed -i \
	's/^rc.fsmount_enable.*/rc.fsmount_enable=NO/' /etc/rc.conf
	chroot /mnt/root /usr/bin/sed -i \
	's/^rc.scst_enable.*/rc.scst_enable=NO/' /etc/rc.conf
	chroot /mnt/root /usr/bin/sed -i \
	's/^rc.rpcagent_enable.*/rc.rpcagent_enable=NO/' /etc/rc.conf
	chroot /mnt/root /usr/bin/sed -i \
	's/^rc.stunnel_enable.*/rc.stunnel_enable=NO/' /etc/rc.conf
	iso_mode="$(cmdline esos_iso)"
	rm -f /mnt/root/etc/crontab
	if [ "${iso_mode}" = "live" ]; then
		mkdir -p /mnt/root/var/state/esos
		touch /mnt/root/var/state/esos/auto_dhcp
		touch /mnt/root/var/state/esos/no_login_tui
	fi
	if [ "${iso_mode}" = "install" ]; then
		chroot /mnt/root /usr/bin/sed -i \
		'/^c1:/s,/sbin/agetty,/usr/local/sbin/iso_installer.sh,' \
		/etc/inittab
	fi
fi

# All done
if ! grep -q -E 'esos_iso|esos_persist' /proc/cmdline; then
	umount ${esos_root_mnt}
fi
umount /proc
umount /sys

# Boot the real thing
exec switch_root /mnt/root /sbin/init

