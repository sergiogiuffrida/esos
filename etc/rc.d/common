RC_D_PREFIX="/etc/rc.d"
STOP_TIMEOUT=600

# User settable services; started in this order and reversed on shutdown
EARLY_SERVICES="rc.haveged rc.openibd rc.opensm"
LATE_SERVICES="rc.lldpad rc.sshd rc.iscsid rc.multipathd rc.mdraid rc.lvm2 \
rc.zfs rc.eio rc.dmcache rc.btier rc.drbd rc.rbdmap rc.virtlogd rc.libvirtd \
rc.sbd rc.corosync rc.dlm rc.clvmd rc.lvmlockd rc.pacemaker rc.fsmount \
rc.mhvtl rc.scst rc.nvmet rc.nfsd rc.nrpe rc.munin rc.snmpd rc.snmptrapd \
rc.nut rc.smartd rc.stunnel rc.nginx rc.telegraf rc.nodeexporter \
rc.libvirtdexporter rc.prometheus rc.vmtoolsd rc.acpid rc.serial rc.watchdog \
rc.rasdaemon rc.msmtpd rc.memcached"

# Script status values
RUNNING=0
STOPPED=1
UNKNOWN=2

# Check if the service is enabled, or not
check_enabled() {
    rc_conf_line="$(/bin/egrep ^${1}_enable /etc/rc.conf)"
    if [ ${?} -eq 0 ]; then
        on_off="$(/bin/echo ${rc_conf_line} | /usr/bin/cut -d= -f2 | \
        /usr/bin/tr -d ' ')"
        case ${on_off} in
            # "yes", "true", "on", or "1"
        [Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1)
            return 0
            ;;
            # "no", "false", "off", or "0"
        [Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0)
            return 1
            ;;
        *)
            /bin/echo "The value for ${1}_enable is not set properly!"
            return 1
            ;;
        esac
    else
        return 1
    fi
}

# Wait for a daemon to stop
wait_for_stop() {
    if [ -n "${2}" ]; then
        timeout=${2}
    else
        timeout=${STOP_TIMEOUT}
    fi
    timer=0
    rc=1
    while [ ${timer} -lt ${timeout} ]; do
        pid=$(/usr/bin/pidof -x ${1} > /dev/null 2>&1)
        if [ ${?} -eq 0 ]; then
            /bin/sleep 1
            timer=$(/usr/bin/expr ${timer} + 1)
            continue
        else
            rc=0
            break
        fi
    done
    return ${rc}
}

# Wait for a PID to stop
wait_for_pid_stop() {
    if [ -n "${2}" ]; then
        timeout=${2}
    else
        timeout=${STOP_TIMEOUT}
    fi
    timer=0
    rc=1
    while [ ${timer} -lt ${timeout} ]; do
        if /usr/bin/ps -p ${1} > /dev/null 2>&1; then
            /bin/sleep 1
            timer=$(/usr/bin/expr ${timer} + 1)
            continue
        else
            rc=0
            break
        fi
    done
    return ${rc}
}

# Check arguments
check_args() {
    if [ ${#} -ne 1 ] || [ "${1}" != "start" ] && [ "${1}" != "stop" ] && \
    [ "${1}" != "status" ]; then
        /bin/echo "Usage: $0 {start|stop|status}"
        exit 1
    fi
}

# Check if optional parameter variable is set
check_opts_set() {
    /bin/egrep ^${1}_opts /etc/rc.conf > /dev/null 2>&1
    if [ ${?} -eq 0 ]; then
        return 0
    else
        return 1
    fi
}

# Get the value of the optional parameter variable
get_rc_opts() {
    rc_conf_line="$(/bin/egrep ^${1}_opts /etc/rc.conf)"
    if [ ${?} -eq 0 ]; then
        opts_val="$(/bin/echo ${rc_conf_line} | /usr/bin/cut -d= -f2 | \
        /usr/bin/tr -d '\"')"
        /bin/echo ${opts_val}
        return 0
    else
        /bin/echo "The variable ${1}_opts is not set!"
        return 1
    fi
}

# Most of this came from /etc/rc.d/rc.sysinit in RHEL 5.11
key_is_random() {
    [ "$1" = "/dev/urandom" -o "$1" = "/dev/hw_random" \
        -o "$1" = "/dev/random" ]
}
init_crypto() {
    local have_random dst src key opt mode owner params makeswap skip arg opt
    local param value rc ret mke2fs mdir

    ret=0
    have_random=${1}
    while read dst src key opt; do
        [ -z "${dst}" -o "${dst#\#}" != "${dst}" ] && continue
        [ -b "/dev/mapper/${dst}" ] && continue;
        if [ "${have_random}" = 0 ] && key_is_random "${key}"; then
            continue
        fi
        if [ -n "${key}" -a "x${key}" != "xnone" -a "x${key}" != "x-" ]; then
            if /usr/bin/test -e "${key}" ; then
                owner=$(/bin/ls -l ${key} | (read a b owner rest; \
                    /bin/echo ${owner}))
                if ! key_is_random "${key}"; then
                mode=$(/bin/ls -l "${key}" | cut -c 5-10)
                    if [ "${mode}" != "------" ]; then
                       /bin/echo $"INSECURE MODE FOR ${key}"
                    fi
                fi
                if [ "${owner}" != root ]; then
                    /bin/echo $"INSECURE OWNER FOR ${key}"
                fi
            else
                /bin/echo $"Key file for ${dst} not found, skipping"
                ret=1
                continue
            fi
        else
            key=""
        fi
        params=""
        makeswap=""
        mke2fs=""
        skip=""
        # Parse the src field for UUID= and convert to real device names
        if [ "${src%%=*}" == "UUID" ]; then
                src=$(/usr/sbin/blkid -t "${src}" -l -o device)
        elif [ "${src/^\/dev\/disk\/by-uuid\/}" != "${src}" ]; then
                src=$(/usr/bin/readlink ${src})
        fi
        [ -z "${src}" ] && continue
        [ -b "${src}" ] || continue
        # Parse the options field, convert to cryptsetup parameters
        # and contruct the command line
        while [ -n "${opt}" ]; do
            arg=${opt%%,*}
            opt=${opt##$arg}
            opt=${opt##,}
            param=${arg%%=*}
            value=${arg##$param=}

            case "${param}" in
            cipher)
                params="${params} -c ${value}"
                if [ -z "${value}" ]; then
                    /bin/echo $"${dst}: no value for cipher option, skipping"
                    skip="yes"
                fi
            ;;
            size)
                params="${params} -s ${value}"
                if [ -z "${value}" ]; then
                    /bin/echo $"${dst}: no value for size option, skipping"
                    skip="yes"
                fi
            ;;
            hash)
                params="${params} -h ${value}"
                if [ -z "${value}" ]; then
                    /bin/echo $"${dst}: no value for hash option, skipping"
                    skip="yes"
                fi
            ;;
            verify)
                params="${params} -y"
            ;;
            swap)
                makeswap=yes
            ;;
            tmp)
                mke2fs=yes
            ;;
            allow-discards)
                params="${params} --allow-discards"
            ;;
            discard)
                params="${params} --allow-discards"
            ;;
            noauto)
                skip="yes"
            esac
        done
        if [ "${skip}" = "yes" ]; then
            ret=1
            continue
        fi
        if /usr/sbin/cryptsetup isLuks "${src}" 2>/dev/null; then
            if key_is_random "${key}"; then
                /bin/echo $"${dst}: LUKS requires non-random key, skipping"
                ret=1
                continue
            fi
            /usr/sbin/cryptsetup ${params} ${key:+-d $key} luksOpen \
                "${src}" "${dst}" <&1
        else
            /usr/sbin/cryptsetup ${params} ${key:+-d $key} create \
                "${dst}" "${src}" <&1
        fi
        rc=${?}
        if [ ${rc} -ne 0 ]; then
            ret=1
            continue
        fi
        if [ -b "/dev/mapper/${dst}" ]; then
            if [ "${makeswap}" = "yes" ]; then
                /sbin/mkswap "/dev/mapper/${dst}" > /dev/null 2>&1
            fi
            if [ "${mke2fs}" = "yes" ]; then
                if /usr/sbin/mke2fs "/dev/mapper/${dst}" > /dev/null 2>&1 \
                    && mdir=$(/bin/mktemp -d /tmp/mountXXXXXX); then
                    /bin/mount "/dev/mapper/${dst}" "${mdir}" \
                        && /bin/chmod 1777 "${mdir}"
                    /bin/umount "${mdir}"
                    /bin/rmdir "${mdir}"
                fi
            fi
        fi
    done < /etc/crypttab
    return ${ret}
}

# Get the logical CPU(s) for a given socket + physical core
get_logical_cpus() {
    local socket="${1}"
    local core="${2}"
    local logi_cpus
    while read -r cpu_line; do
        socket_val="$(echo "${cpu_line}" | cut -d, -f1)"
        core_val="$(echo "${cpu_line}" | cut -d, -f2)"
        cpu_num="$(echo "${cpu_line}" | cut -d, -f3)"
        if [ "${socket}" = "${socket_val}" ]; then
            if [ "${core}" = "${core_val}" ]; then
                if [ -z "${logi_cpus}" ]; then
                    logi_cpus="${cpu_num}"
                else
                    logi_cpus="${logi_cpus},${cpu_num}"
                fi
            fi
        fi
    done <<< "$(lscpu --online --parse=SOCKET,CORE,CPU)"
    echo "${logi_cpus}"
}

